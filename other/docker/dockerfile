# 文件名固定为dockerfile，否则docker build -f指定文件
# 第一条指令必须为FROM指令,并且如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）
# platform amd64, arm32v6, arm32v7, arm64v8, i386, ppc64le, riscv64, s390x
# alpine-最小的linux发行版 scratch-虚拟基础的
# FROM --platform=arm64 alpine
FROM --platform=amd64 alpine

# 指定维护者的信息
LABEL Author="deep2code" 

# 格式：WORKDIR /path/to/workdir
# 为后续的 RUN, CMD, ENTRYPOINT 指令配置工作目录
#（可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径， 则会基于之前命令指定的路径）

# 格式：RUN <command> 或 RUN ["", "", ""]
# docker build时执行 每条指令将在当前镜像基础上执行,并提交为新的镜像

# 格式：VOLUME ["/mnt"]
# 创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等

# 复制本地主机的文件(Dockerfile所在目录的相对路径）到容器中目标目录的
COPY deep2code.sh /home

# 格式：EXPOSE <port>  [ <port> ...]
# 告诉Docker服务端暴露端口，在容器启动时需要通过 -p 做端口映射

# 格式: ADD  <src>  <dest>
# 复制指定的到容器的中，可以是Dockerfile所在的目录的一个相对路径；可以是URL，也可以是tar.gz（自动解压）

# 格式:ENV <key> <value>
# 指定环境变量，会被RUN指令使用，并在容器运行时保存

# 格式：CMD ["","",""]
# 指定启动容器时执行的命令,每个Dockerfile只能有一条CMD指令，如果指定了多条指令，则最后一条执行。（会被启动时指定的命令覆盖）
CMD ["/bin/sh", "/home/deep2code.sh" ]

# 编译生成
# docker build -t  deep2code:v1 .