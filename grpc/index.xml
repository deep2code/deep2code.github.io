<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc on 技术博客</title>
    <link>/grpc/</link>
    <description>Recent content in grpc on 技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang示例</title>
      <link>/grpc/golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/grpc/golang/</guid>
      <description>server package main import ( &amp;#34;context&amp;#34; &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net&amp;#34; &amp;#34;google.golang.org/grpc&amp;#34; &amp;#34;google.golang.org/grpc/metadata&amp;#34; &amp;#34;google.golang.org/grpc/peer&amp;#34; com &amp;#34;xxx.site/myself/grpc-common&amp;#34; ) var ( GitHash = &amp;#34;Unkown&amp;#34; CompileTime = &amp;#34;Unkown&amp;#34; port = flag.Int(&amp;#34;port&amp;#34;, 8411, &amp;#34;默认端口&amp;#34;) ) // 定义服务端中间件 func middleware(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) { log.Printf(&amp;#34;middleware ctx:%v&amp;#34;, ctx) log.Printf(&amp;#34;middleware req:%v&amp;#34;, req) log.Printf(&amp;#34;middleware info:%v&amp;#34;, info) log.Printf(&amp;#34;middleware handler:%v&amp;#34;, handler) resp, err = handler(ctx, req) log.Printf(&amp;#34;middleware resp:%v&amp;#34;, resp) log.Printf(&amp;#34;middleware err:%v&amp;#34;, err) return } type MathServer struct { com.</description>
    </item>
    
  </channel>
</rss>
