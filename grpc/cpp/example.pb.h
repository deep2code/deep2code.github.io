// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_example_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "other.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_example_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto;
namespace example {
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Person_DictEntry_DoNotUse;
struct Person_DictEntry_DoNotUseDefaultTypeInternal;
extern Person_DictEntry_DoNotUseDefaultTypeInternal _Person_DictEntry_DoNotUse_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResponse_Result;
struct SearchResponse_ResultDefaultTypeInternal;
extern SearchResponse_ResultDefaultTypeInternal _SearchResponse_Result_default_instance_;
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> ::example::Person* Arena::CreateMaybeMessage<::example::Person>(Arena*);
template<> ::example::Person_DictEntry_DoNotUse* Arena::CreateMaybeMessage<::example::Person_DictEntry_DoNotUse>(Arena*);
template<> ::example::SearchResponse* Arena::CreateMaybeMessage<::example::SearchResponse>(Arena*);
template<> ::example::SearchResponse_Result* Arena::CreateMaybeMessage<::example::SearchResponse_Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace example {

// ===================================================================

class Person_DictEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Person_DictEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Person_DictEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Person_DictEntry_DoNotUse();
  explicit constexpr Person_DictEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Person_DictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Person_DictEntry_DoNotUse& other);
  static const Person_DictEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Person_DictEntry_DoNotUse*>(&_Person_DictEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "example.Person.DictEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit constexpr Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Person& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEmailsFieldNumber = 3,
    kDictFieldNumber = 4,
    kOrdersFieldNumber = 5,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated string emails = 3;
  int emails_size() const;
  private:
  int _internal_emails_size() const;
  public:
  void clear_emails();
  const std::string& emails(int index) const;
  std::string* mutable_emails(int index);
  void set_emails(int index, const std::string& value);
  void set_emails(int index, std::string&& value);
  void set_emails(int index, const char* value);
  void set_emails(int index, const char* value, size_t size);
  std::string* add_emails();
  void add_emails(const std::string& value);
  void add_emails(std::string&& value);
  void add_emails(const char* value);
  void add_emails(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& emails() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_emails();
  private:
  const std::string& _internal_emails(int index) const;
  std::string* _internal_add_emails();
  public:

  // map<string, int32> dict = 4;
  int dict_size() const;
  private:
  int _internal_dict_size() const;
  public:
  void clear_dict();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_dict();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_dict();

  // repeated .example.Order orders = 5;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::example::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Order >*
      mutable_orders();
  private:
  const ::example::Order& _internal_orders(int index) const;
  ::example::Order* _internal_add_orders();
  public:
  const ::example::Order& orders(int index) const;
  ::example::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Order >&
      orders() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:example.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> emails_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Person_DictEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> dict_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Order > orders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.SearchResponse.Result) */ {
 public:
  inline SearchResponse_Result() : SearchResponse_Result(nullptr) {}
  ~SearchResponse_Result() override;
  explicit constexpr SearchResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse_Result(const SearchResponse_Result& from);
  SearchResponse_Result(SearchResponse_Result&& from) noexcept
    : SearchResponse_Result() {
    *this = ::std::move(from);
  }

  inline SearchResponse_Result& operator=(const SearchResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse_Result& operator=(SearchResponse_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse_Result* internal_default_instance() {
    return reinterpret_cast<const SearchResponse_Result*>(
               &_SearchResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchResponse_Result& a, SearchResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponse_Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.SearchResponse.Result";
  }
  protected:
  explicit SearchResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnippetsFieldNumber = 3,
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // repeated string snippets = 3;
  int snippets_size() const;
  private:
  int _internal_snippets_size() const;
  public:
  void clear_snippets();
  const std::string& snippets(int index) const;
  std::string* mutable_snippets(int index);
  void set_snippets(int index, const std::string& value);
  void set_snippets(int index, std::string&& value);
  void set_snippets(int index, const char* value);
  void set_snippets(int index, const char* value, size_t size);
  std::string* add_snippets();
  void add_snippets(const std::string& value);
  void add_snippets(std::string&& value);
  void add_snippets(const char* value);
  void add_snippets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& snippets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_snippets();
  private:
  const std::string& _internal_snippets(int index) const;
  std::string* _internal_add_snippets();
  public:

  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:example.SearchResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> snippets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit constexpr SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .example.SearchResponse.Result results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::example::SearchResponse_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::SearchResponse_Result >*
      mutable_results();
  private:
  const ::example::SearchResponse_Result& _internal_results(int index) const;
  ::example::SearchResponse_Result* _internal_add_results();
  public:
  const ::example::SearchResponse_Result& results(int index) const;
  ::example::SearchResponse_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::SearchResponse_Result >&
      results() const;

  // @@protoc_insertion_point(class_scope:example.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::SearchResponse_Result > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Person

// string name = 1;
inline void Person::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:example.Person.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:example.Person.name)
}
inline std::string* Person::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:example.Person.name)
  return _s;
}
inline const std::string& Person::_internal_name() const {
  return name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:example.Person.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:example.Person.name)
}

// int32 id = 2;
inline void Person::clear_id() {
  id_ = 0;
}
inline int32_t Person::_internal_id() const {
  return id_;
}
inline int32_t Person::id() const {
  // @@protoc_insertion_point(field_get:example.Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void Person::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:example.Person.id)
}

// repeated string emails = 3;
inline int Person::_internal_emails_size() const {
  return emails_.size();
}
inline int Person::emails_size() const {
  return _internal_emails_size();
}
inline void Person::clear_emails() {
  emails_.Clear();
}
inline std::string* Person::add_emails() {
  std::string* _s = _internal_add_emails();
  // @@protoc_insertion_point(field_add_mutable:example.Person.emails)
  return _s;
}
inline const std::string& Person::_internal_emails(int index) const {
  return emails_.Get(index);
}
inline const std::string& Person::emails(int index) const {
  // @@protoc_insertion_point(field_get:example.Person.emails)
  return _internal_emails(index);
}
inline std::string* Person::mutable_emails(int index) {
  // @@protoc_insertion_point(field_mutable:example.Person.emails)
  return emails_.Mutable(index);
}
inline void Person::set_emails(int index, const std::string& value) {
  emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:example.Person.emails)
}
inline void Person::set_emails(int index, std::string&& value) {
  emails_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:example.Person.emails)
}
inline void Person::set_emails(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:example.Person.emails)
}
inline void Person::set_emails(int index, const char* value, size_t size) {
  emails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:example.Person.emails)
}
inline std::string* Person::_internal_add_emails() {
  return emails_.Add();
}
inline void Person::add_emails(const std::string& value) {
  emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:example.Person.emails)
}
inline void Person::add_emails(std::string&& value) {
  emails_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:example.Person.emails)
}
inline void Person::add_emails(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:example.Person.emails)
}
inline void Person::add_emails(const char* value, size_t size) {
  emails_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:example.Person.emails)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::emails() const {
  // @@protoc_insertion_point(field_list:example.Person.emails)
  return emails_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_emails() {
  // @@protoc_insertion_point(field_mutable_list:example.Person.emails)
  return &emails_;
}

// map<string, int32> dict = 4;
inline int Person::_internal_dict_size() const {
  return dict_.size();
}
inline int Person::dict_size() const {
  return _internal_dict_size();
}
inline void Person::clear_dict() {
  dict_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
Person::_internal_dict() const {
  return dict_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
Person::dict() const {
  // @@protoc_insertion_point(field_map:example.Person.dict)
  return _internal_dict();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
Person::_internal_mutable_dict() {
  return dict_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
Person::mutable_dict() {
  // @@protoc_insertion_point(field_mutable_map:example.Person.dict)
  return _internal_mutable_dict();
}

// repeated .example.Order orders = 5;
inline int Person::_internal_orders_size() const {
  return orders_.size();
}
inline int Person::orders_size() const {
  return _internal_orders_size();
}
inline ::example::Order* Person::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:example.Person.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Order >*
Person::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:example.Person.orders)
  return &orders_;
}
inline const ::example::Order& Person::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::example::Order& Person::orders(int index) const {
  // @@protoc_insertion_point(field_get:example.Person.orders)
  return _internal_orders(index);
}
inline ::example::Order* Person::_internal_add_orders() {
  return orders_.Add();
}
inline ::example::Order* Person::add_orders() {
  ::example::Order* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:example.Person.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Order >&
Person::orders() const {
  // @@protoc_insertion_point(field_list:example.Person.orders)
  return orders_;
}

// -------------------------------------------------------------------

// SearchResponse_Result

// string url = 1;
inline void SearchResponse_Result::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& SearchResponse_Result::url() const {
  // @@protoc_insertion_point(field_get:example.SearchResponse.Result.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse_Result::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:example.SearchResponse.Result.url)
}
inline std::string* SearchResponse_Result::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:example.SearchResponse.Result.url)
  return _s;
}
inline const std::string& SearchResponse_Result::_internal_url() const {
  return url_.Get();
}
inline void SearchResponse_Result::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchResponse_Result::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchResponse_Result::release_url() {
  // @@protoc_insertion_point(field_release:example.SearchResponse.Result.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchResponse_Result::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:example.SearchResponse.Result.url)
}

// string title = 2;
inline void SearchResponse_Result::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& SearchResponse_Result::title() const {
  // @@protoc_insertion_point(field_get:example.SearchResponse.Result.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse_Result::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:example.SearchResponse.Result.title)
}
inline std::string* SearchResponse_Result::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:example.SearchResponse.Result.title)
  return _s;
}
inline const std::string& SearchResponse_Result::_internal_title() const {
  return title_.Get();
}
inline void SearchResponse_Result::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchResponse_Result::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchResponse_Result::release_title() {
  // @@protoc_insertion_point(field_release:example.SearchResponse.Result.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchResponse_Result::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:example.SearchResponse.Result.title)
}

// repeated string snippets = 3;
inline int SearchResponse_Result::_internal_snippets_size() const {
  return snippets_.size();
}
inline int SearchResponse_Result::snippets_size() const {
  return _internal_snippets_size();
}
inline void SearchResponse_Result::clear_snippets() {
  snippets_.Clear();
}
inline std::string* SearchResponse_Result::add_snippets() {
  std::string* _s = _internal_add_snippets();
  // @@protoc_insertion_point(field_add_mutable:example.SearchResponse.Result.snippets)
  return _s;
}
inline const std::string& SearchResponse_Result::_internal_snippets(int index) const {
  return snippets_.Get(index);
}
inline const std::string& SearchResponse_Result::snippets(int index) const {
  // @@protoc_insertion_point(field_get:example.SearchResponse.Result.snippets)
  return _internal_snippets(index);
}
inline std::string* SearchResponse_Result::mutable_snippets(int index) {
  // @@protoc_insertion_point(field_mutable:example.SearchResponse.Result.snippets)
  return snippets_.Mutable(index);
}
inline void SearchResponse_Result::set_snippets(int index, const std::string& value) {
  snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:example.SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::set_snippets(int index, std::string&& value) {
  snippets_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:example.SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::set_snippets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:example.SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::set_snippets(int index, const char* value, size_t size) {
  snippets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:example.SearchResponse.Result.snippets)
}
inline std::string* SearchResponse_Result::_internal_add_snippets() {
  return snippets_.Add();
}
inline void SearchResponse_Result::add_snippets(const std::string& value) {
  snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:example.SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::add_snippets(std::string&& value) {
  snippets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:example.SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::add_snippets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:example.SearchResponse.Result.snippets)
}
inline void SearchResponse_Result::add_snippets(const char* value, size_t size) {
  snippets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:example.SearchResponse.Result.snippets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchResponse_Result::snippets() const {
  // @@protoc_insertion_point(field_list:example.SearchResponse.Result.snippets)
  return snippets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchResponse_Result::mutable_snippets() {
  // @@protoc_insertion_point(field_mutable_list:example.SearchResponse.Result.snippets)
  return &snippets_;
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .example.SearchResponse.Result results = 1;
inline int SearchResponse::_internal_results_size() const {
  return results_.size();
}
inline int SearchResponse::results_size() const {
  return _internal_results_size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline ::example::SearchResponse_Result* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:example.SearchResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::SearchResponse_Result >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:example.SearchResponse.results)
  return &results_;
}
inline const ::example::SearchResponse_Result& SearchResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::example::SearchResponse_Result& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:example.SearchResponse.results)
  return _internal_results(index);
}
inline ::example::SearchResponse_Result* SearchResponse::_internal_add_results() {
  return results_.Add();
}
inline ::example::SearchResponse_Result* SearchResponse::add_results() {
  ::example::SearchResponse_Result* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:example.SearchResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::SearchResponse_Result >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:example.SearchResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_example_2eproto
